class Solution {
    public int swimInWater(int[][] grid) {
        int n = grid.length;
        int res = 0;
        boolean[][] visited = new boolean[n][n];
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((k1, k2) ->
                grid[k1 / n][k1 % n] - grid[k2 / n][k2 % n]);
        pq.offer(0);
        int[][] dir = new int[][]{{-1,0},{1,0},{0,1},{0,-1}};
        while (!pq.isEmpty()){
            int pos = pq.poll();
            int curX = pos / n;
            int curY = pos % n;
            res = Math.max(res, grid[curX][curY]);
           if(curX == n - 1 && curY == n - 1){
                return res;
            }
            for(int i = 0; i < 4; i++){
                int X = curX + dir[i][0];
                int Y = curY + dir[i][1];
                if(X < 0 || X >= n || Y < 0 || Y >= n || visited[X][Y] == true){
                    continue;
                }
                visited[X][Y] = true;
                pq.offer(X * n + Y);
            }
        }
        return -1;
    }
}
