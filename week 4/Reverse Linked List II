class Solution {
   public ListNode reverseBetween(ListNode head, int left, int right) {
    
        ListNode curr, prev, next, lead, swappy;
        
        int count = 1;
        prev = null;
        curr = head;
        
        // find starting swap point, aka "left"
        while (count != left) {
            prev = curr;
            curr = curr.next;
            count++;
        }
        
        // save the node before first swap & also save first node to swap
    
        // first node to be swapped
		swappy = curr;
		// node before first node to be swapped
        lead = prev;    
  
        // from "left" node to "right" node, reverse links one by one
        // at the end of the while loop, curr will be pointing to the node after index "right"
		
        while (curr != null && count != right + 1) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            count++;
        }

        // List = 1 2 3 4 5
		
        // swap 1 5 
        if (lead == null && curr == null) {
            return prev;
        }
    
        // swap 1 3
        else if (lead == null && curr != null) {
            swappy.next = curr;
            return prev;
        }

    
        // swap 3 5
        else if (lead != null && curr == null) {
            lead.next = prev;
            swappy.next = null;
            return head;
        }
    
        // else ... (lead != null && curr != null)
        // swap 3 4
        else {
            lead.next = prev;
            swappy.next = curr;
            return head;
        }
    
    }
}